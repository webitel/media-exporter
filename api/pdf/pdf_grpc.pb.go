// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pdf.proto

package pdf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PdfService_GeneratePdfExport_FullMethodName   = "/webitel.pdf.PdfService/GeneratePdfExport"
	PdfService_DownloadPdfExport_FullMethodName   = "/webitel.pdf.PdfService/DownloadPdfExport"
	PdfService_GetPdfExportHistory_FullMethodName = "/webitel.pdf.PdfService/GetPdfExportHistory"
)

// PdfServiceClient is the client API for PdfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PdfService provides methods to generate, download,
// and manage PDF exports from media files.
type PdfServiceClient interface {
	// Generate a new PDF export asynchronously.
	// Returns metadata about the created export task.
	GeneratePdfExport(ctx context.Context, in *PdfGenerateRequest, opts ...grpc.CallOption) (*PdfExportMetadata, error)
	// Download a previously generated PDF by export ID.
	DownloadPdfExport(ctx context.Context, in *PdfDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PdfExportChunk], error)
	// Get paginated history of PDF exports for a given agent.
	GetPdfExportHistory(ctx context.Context, in *PdfHistoryRequest, opts ...grpc.CallOption) (*PdfHistoryResponse, error)
}

type pdfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfServiceClient(cc grpc.ClientConnInterface) PdfServiceClient {
	return &pdfServiceClient{cc}
}

func (c *pdfServiceClient) GeneratePdfExport(ctx context.Context, in *PdfGenerateRequest, opts ...grpc.CallOption) (*PdfExportMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PdfExportMetadata)
	err := c.cc.Invoke(ctx, PdfService_GeneratePdfExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfServiceClient) DownloadPdfExport(ctx context.Context, in *PdfDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PdfExportChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PdfService_ServiceDesc.Streams[0], PdfService_DownloadPdfExport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PdfDownloadRequest, PdfExportChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PdfService_DownloadPdfExportClient = grpc.ServerStreamingClient[PdfExportChunk]

func (c *pdfServiceClient) GetPdfExportHistory(ctx context.Context, in *PdfHistoryRequest, opts ...grpc.CallOption) (*PdfHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PdfHistoryResponse)
	err := c.cc.Invoke(ctx, PdfService_GetPdfExportHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfServiceServer is the server API for PdfService service.
// All implementations must embed UnimplementedPdfServiceServer
// for forward compatibility.
//
// PdfService provides methods to generate, download,
// and manage PDF exports from media files.
type PdfServiceServer interface {
	// Generate a new PDF export asynchronously.
	// Returns metadata about the created export task.
	GeneratePdfExport(context.Context, *PdfGenerateRequest) (*PdfExportMetadata, error)
	// Download a previously generated PDF by export ID.
	DownloadPdfExport(*PdfDownloadRequest, grpc.ServerStreamingServer[PdfExportChunk]) error
	// Get paginated history of PDF exports for a given agent.
	GetPdfExportHistory(context.Context, *PdfHistoryRequest) (*PdfHistoryResponse, error)
	mustEmbedUnimplementedPdfServiceServer()
}

// UnimplementedPdfServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPdfServiceServer struct{}

func (UnimplementedPdfServiceServer) GeneratePdfExport(context.Context, *PdfGenerateRequest) (*PdfExportMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePdfExport not implemented")
}
func (UnimplementedPdfServiceServer) DownloadPdfExport(*PdfDownloadRequest, grpc.ServerStreamingServer[PdfExportChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadPdfExport not implemented")
}
func (UnimplementedPdfServiceServer) GetPdfExportHistory(context.Context, *PdfHistoryRequest) (*PdfHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPdfExportHistory not implemented")
}
func (UnimplementedPdfServiceServer) mustEmbedUnimplementedPdfServiceServer() {}
func (UnimplementedPdfServiceServer) testEmbeddedByValue()                    {}

// UnsafePdfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfServiceServer will
// result in compilation errors.
type UnsafePdfServiceServer interface {
	mustEmbedUnimplementedPdfServiceServer()
}

func RegisterPdfServiceServer(s grpc.ServiceRegistrar, srv PdfServiceServer) {
	// If the following call pancis, it indicates UnimplementedPdfServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PdfService_ServiceDesc, srv)
}

func _PdfService_GeneratePdfExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).GeneratePdfExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PdfService_GeneratePdfExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).GeneratePdfExport(ctx, req.(*PdfGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfService_DownloadPdfExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PdfDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PdfServiceServer).DownloadPdfExport(m, &grpc.GenericServerStream[PdfDownloadRequest, PdfExportChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PdfService_DownloadPdfExportServer = grpc.ServerStreamingServer[PdfExportChunk]

func _PdfService_GetPdfExportHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).GetPdfExportHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PdfService_GetPdfExportHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).GetPdfExportHistory(ctx, req.(*PdfHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PdfService_ServiceDesc is the grpc.ServiceDesc for PdfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.pdf.PdfService",
	HandlerType: (*PdfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePdfExport",
			Handler:    _PdfService_GeneratePdfExport_Handler,
		},
		{
			MethodName: "GetPdfExportHistory",
			Handler:    _PdfService_GetPdfExportHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadPdfExport",
			Handler:       _PdfService_DownloadPdfExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pdf.proto",
}
