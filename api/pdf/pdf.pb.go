// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: pdf.proto

package pdf

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of the PDF export process.
type PdfExportStatus int32

const (
	PdfExportStatus_PDF_EXPORT_STATUS_UNSPECIFIED PdfExportStatus = 0 // Default value.
	PdfExportStatus_PDF_EXPORT_STATUS_PENDING     PdfExportStatus = 1 // Task is waiting to start.
	PdfExportStatus_PDF_EXPORT_STATUS_PROCESSING  PdfExportStatus = 2 // Task is in progress.
	PdfExportStatus_PDF_EXPORT_STATUS_DONE        PdfExportStatus = 3 // Task is completed successfully.
	PdfExportStatus_PDF_EXPORT_STATUS_FAILED      PdfExportStatus = 4 // Task failed.
)

// Enum value maps for PdfExportStatus.
var (
	PdfExportStatus_name = map[int32]string{
		0: "PDF_EXPORT_STATUS_UNSPECIFIED",
		1: "PDF_EXPORT_STATUS_PENDING",
		2: "PDF_EXPORT_STATUS_PROCESSING",
		3: "PDF_EXPORT_STATUS_DONE",
		4: "PDF_EXPORT_STATUS_FAILED",
	}
	PdfExportStatus_value = map[string]int32{
		"PDF_EXPORT_STATUS_UNSPECIFIED": 0,
		"PDF_EXPORT_STATUS_PENDING":     1,
		"PDF_EXPORT_STATUS_PROCESSING":  2,
		"PDF_EXPORT_STATUS_DONE":        3,
		"PDF_EXPORT_STATUS_FAILED":      4,
	}
)

func (x PdfExportStatus) Enum() *PdfExportStatus {
	p := new(PdfExportStatus)
	*p = x
	return p
}

func (x PdfExportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PdfExportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pdf_proto_enumTypes[0].Descriptor()
}

func (PdfExportStatus) Type() protoreflect.EnumType {
	return &file_pdf_proto_enumTypes[0]
}

func (x PdfExportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PdfExportStatus.Descriptor instead.
func (PdfExportStatus) EnumDescriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{0}
}

// Request for generating a PDF export.
type PdfGenerateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       int64                  `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`        // Agent ID for which the export is generated.
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`                        // Channel type (e.g., "screenshot").
	From          int64                  `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`                             // Start timestamp (Unix millis).
	To            int64                  `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`                                 // End timestamp (Unix millis).
	FileIds       []int64                `protobuf:"varint,5,rep,packed,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"` // Optional list of specific file IDs to include.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfGenerateRequest) Reset() {
	*x = PdfGenerateRequest{}
	mi := &file_pdf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfGenerateRequest) ProtoMessage() {}

func (x *PdfGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfGenerateRequest.ProtoReflect.Descriptor instead.
func (*PdfGenerateRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{0}
}

func (x *PdfGenerateRequest) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *PdfGenerateRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PdfGenerateRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *PdfGenerateRequest) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *PdfGenerateRequest) GetFileIds() []int64 {
	if x != nil {
		return x.FileIds
	}
	return nil
}

// Request for downloading a previously generated PDF export.
type PdfDownloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExportId      int64                  `protobuf:"varint,1,opt,name=export_id,json=exportId,proto3" json:"export_id,omitempty"` // Unique export identifier.
	DomainId      int64                  `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"` // Domain ID for authorization.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfDownloadRequest) Reset() {
	*x = PdfDownloadRequest{}
	mi := &file_pdf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfDownloadRequest) ProtoMessage() {}

func (x *PdfDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfDownloadRequest.ProtoReflect.Descriptor instead.
func (*PdfDownloadRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{1}
}

func (x *PdfDownloadRequest) GetExportId() int64 {
	if x != nil {
		return x.ExportId
	}
	return 0
}

func (x *PdfDownloadRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

// Metadata about a PDF export task.
type PdfExportMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`       // Unique identifier of the task.
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // File name of the export.
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"` // MIME type, e.g., "application/pdf".
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                     // Task status: pending | processing | done | failed.
	Size          int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                        // File size in bytes (0 if not ready).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfExportMetadata) Reset() {
	*x = PdfExportMetadata{}
	mi := &file_pdf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfExportMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfExportMetadata) ProtoMessage() {}

func (x *PdfExportMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfExportMetadata.ProtoReflect.Descriptor instead.
func (*PdfExportMetadata) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{2}
}

func (x *PdfExportMetadata) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PdfExportMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PdfExportMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *PdfExportMetadata) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PdfExportMetadata) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Chunked response with PDF binary data.
type PdfExportChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Raw PDF file bytes (chunked).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfExportChunk) Reset() {
	*x = PdfExportChunk{}
	mi := &file_pdf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfExportChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfExportChunk) ProtoMessage() {}

func (x *PdfExportChunk) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfExportChunk.ProtoReflect.Descriptor instead.
func (*PdfExportChunk) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{3}
}

func (x *PdfExportChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for retrieving paginated history of exports.
type PdfHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       int64                  `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Agent ID.
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                      // Page number (starting from 1).
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                      // Page size (number of records per page).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfHistoryRequest) Reset() {
	*x = PdfHistoryRequest{}
	mi := &file_pdf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfHistoryRequest) ProtoMessage() {}

func (x *PdfHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfHistoryRequest.ProtoReflect.Descriptor instead.
func (*PdfHistoryRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{4}
}

func (x *PdfHistoryRequest) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *PdfHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PdfHistoryRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Response containing a page of export history.
type PdfHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // Current page number.
	Next          bool                   `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"` // True if there is a next page.
	Data          []*PdfHistoryRecord    `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`  // List of export history records.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfHistoryResponse) Reset() {
	*x = PdfHistoryResponse{}
	mi := &file_pdf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfHistoryResponse) ProtoMessage() {}

func (x *PdfHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfHistoryResponse.ProtoReflect.Descriptor instead.
func (*PdfHistoryResponse) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{5}
}

func (x *PdfHistoryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PdfHistoryResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *PdfHistoryResponse) GetData() []*PdfHistoryRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

// Represents a single PDF export record.
type PdfHistoryRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // Export ID.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                       // Export name.
	FileId        int64                  `protobuf:"varint,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`                    // Related file ID.
	MimeType      string                 `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`               // MIME type of the export.
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`           // Creation timestamp (Unix millis).
	UpdatedAt     int64                  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`           // Update timestamp (Unix millis).
	CreatedBy     int64                  `protobuf:"varint,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`           // User ID who created the export.
	UpdatedBy     int64                  `protobuf:"varint,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`           // User ID who last updated the export.
	Status        PdfExportStatus        `protobuf:"varint,9,opt,name=status,proto3,enum=webitel.pdf.PdfExportStatus" json:"status,omitempty"` // Current export status.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfHistoryRecord) Reset() {
	*x = PdfHistoryRecord{}
	mi := &file_pdf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfHistoryRecord) ProtoMessage() {}

func (x *PdfHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfHistoryRecord.ProtoReflect.Descriptor instead.
func (*PdfHistoryRecord) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{6}
}

func (x *PdfHistoryRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PdfHistoryRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PdfHistoryRecord) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *PdfHistoryRecord) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *PdfHistoryRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PdfHistoryRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PdfHistoryRecord) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *PdfHistoryRecord) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PdfHistoryRecord) GetStatus() PdfExportStatus {
	if x != nil {
		return x.Status
	}
	return PdfExportStatus_PDF_EXPORT_STATUS_UNSPECIFIED
}

var File_pdf_proto protoreflect.FileDescriptor

const file_pdf_proto_rawDesc = "" +
	"\n" +
	"\tpdf.proto\x12\vwebitel.pdf\x1a\x1cgoogle/api/annotations.proto\"\x88\x01\n" +
	"\x12PdfGenerateRequest\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\x03R\aagentId\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x12\n" +
	"\x04from\x18\x03 \x01(\x03R\x04from\x12\x0e\n" +
	"\x02to\x18\x04 \x01(\x03R\x02to\x12\x19\n" +
	"\bfile_ids\x18\x05 \x03(\x03R\afileIds\"N\n" +
	"\x12PdfDownloadRequest\x12\x1b\n" +
	"\texport_id\x18\x01 \x01(\x03R\bexportId\x12\x1b\n" +
	"\tdomain_id\x18\x02 \x01(\x03R\bdomainId\"\x92\x01\n" +
	"\x11PdfExportMetadata\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x12\n" +
	"\x04size\x18\x05 \x01(\x03R\x04size\"$\n" +
	"\x0ePdfExportChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"V\n" +
	"\x11PdfHistoryRequest\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\x03R\aagentId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\"o\n" +
	"\x12PdfHistoryResponse\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04next\x18\x02 \x01(\bR\x04next\x121\n" +
	"\x04data\x18\x03 \x03(\v2\x1d.webitel.pdf.PdfHistoryRecordR\x04data\"\x9e\x02\n" +
	"\x10PdfHistoryRecord\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x17\n" +
	"\afile_id\x18\x03 \x01(\x03R\x06fileId\x12\x1b\n" +
	"\tmime_type\x18\x04 \x01(\tR\bmimeType\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_by\x18\a \x01(\x03R\tcreatedBy\x12\x1d\n" +
	"\n" +
	"updated_by\x18\b \x01(\x03R\tupdatedBy\x124\n" +
	"\x06status\x18\t \x01(\x0e2\x1c.webitel.pdf.PdfExportStatusR\x06status*\xaf\x01\n" +
	"\x0fPdfExportStatus\x12!\n" +
	"\x1dPDF_EXPORT_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19PDF_EXPORT_STATUS_PENDING\x10\x01\x12 \n" +
	"\x1cPDF_EXPORT_STATUS_PROCESSING\x10\x02\x12\x1a\n" +
	"\x16PDF_EXPORT_STATUS_DONE\x10\x03\x12\x1c\n" +
	"\x18PDF_EXPORT_STATUS_FAILED\x10\x042\xf4\x02\n" +
	"\n" +
	"PdfService\x12w\n" +
	"\x11GeneratePdfExport\x12\x1f.webitel.pdf.PdfGenerateRequest\x1a\x1e.webitel.pdf.PdfExportMetadata\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/export/pdf/{agent_id}\x12m\n" +
	"\x11DownloadPdfExport\x12\x1f.webitel.pdf.PdfDownloadRequest\x1a\x1b.webitel.pdf.PdfExportChunk\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/export/pdf/{id}0\x01\x12~\n" +
	"\x13GetPdfExportHistory\x12\x1e.webitel.pdf.PdfHistoryRequest\x1a\x1f.webitel.pdf.PdfHistoryResponse\"&\x82\xd3\xe4\x93\x02 \x12\x1e/export/pdf/{agent_id}/historyB\x8c\x01\n" +
	"\x0fcom.webitel.pdfB\bPdfProtoP\x01Z\"github.com/webitel/pdf/api/pdf;pdf\xa2\x02\x03WPX\xaa\x02\vWebitel.Pdf\xca\x02\vWebitel\\Pdf\xe2\x02\x17Webitel\\Pdf\\GPBMetadata\xea\x02\fWebitel::Pdfb\x06proto3"

var (
	file_pdf_proto_rawDescOnce sync.Once
	file_pdf_proto_rawDescData []byte
)

func file_pdf_proto_rawDescGZIP() []byte {
	file_pdf_proto_rawDescOnce.Do(func() {
		file_pdf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pdf_proto_rawDesc), len(file_pdf_proto_rawDesc)))
	})
	return file_pdf_proto_rawDescData
}

var file_pdf_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pdf_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pdf_proto_goTypes = []any{
	(PdfExportStatus)(0),       // 0: webitel.pdf.PdfExportStatus
	(*PdfGenerateRequest)(nil), // 1: webitel.pdf.PdfGenerateRequest
	(*PdfDownloadRequest)(nil), // 2: webitel.pdf.PdfDownloadRequest
	(*PdfExportMetadata)(nil),  // 3: webitel.pdf.PdfExportMetadata
	(*PdfExportChunk)(nil),     // 4: webitel.pdf.PdfExportChunk
	(*PdfHistoryRequest)(nil),  // 5: webitel.pdf.PdfHistoryRequest
	(*PdfHistoryResponse)(nil), // 6: webitel.pdf.PdfHistoryResponse
	(*PdfHistoryRecord)(nil),   // 7: webitel.pdf.PdfHistoryRecord
}
var file_pdf_proto_depIdxs = []int32{
	7, // 0: webitel.pdf.PdfHistoryResponse.data:type_name -> webitel.pdf.PdfHistoryRecord
	0, // 1: webitel.pdf.PdfHistoryRecord.status:type_name -> webitel.pdf.PdfExportStatus
	1, // 2: webitel.pdf.PdfService.GeneratePdfExport:input_type -> webitel.pdf.PdfGenerateRequest
	2, // 3: webitel.pdf.PdfService.DownloadPdfExport:input_type -> webitel.pdf.PdfDownloadRequest
	5, // 4: webitel.pdf.PdfService.GetPdfExportHistory:input_type -> webitel.pdf.PdfHistoryRequest
	3, // 5: webitel.pdf.PdfService.GeneratePdfExport:output_type -> webitel.pdf.PdfExportMetadata
	4, // 6: webitel.pdf.PdfService.DownloadPdfExport:output_type -> webitel.pdf.PdfExportChunk
	6, // 7: webitel.pdf.PdfService.GetPdfExportHistory:output_type -> webitel.pdf.PdfHistoryResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pdf_proto_init() }
func file_pdf_proto_init() {
	if File_pdf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pdf_proto_rawDesc), len(file_pdf_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdf_proto_goTypes,
		DependencyIndexes: file_pdf_proto_depIdxs,
		EnumInfos:         file_pdf_proto_enumTypes,
		MessageInfos:      file_pdf_proto_msgTypes,
	}.Build()
	File_pdf_proto = out.File
	file_pdf_proto_goTypes = nil
	file_pdf_proto_depIdxs = nil
}
