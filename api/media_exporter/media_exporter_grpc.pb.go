// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: media_exporter.proto

package media_exporter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaExporterService_ExportPDF_FullMethodName = "/webitel.mediaexporter.MediaExporterService/ExportPDF"
	MediaExporterService_ExportZIP_FullMethodName = "/webitel.mediaexporter.MediaExporterService/ExportZIP"
)

// MediaExporterServiceClient is the client API for MediaExporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MediaExporterService is responsible for generating exports (PDF, ZIP)
// from media files (screenshots, recordings, etc.) stored in the system.
type MediaExporterServiceClient interface {
	// Export PDF by channel and date range
	ExportPDF(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	// Export ZIP by channel and date range
	ExportZIP(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type mediaExporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaExporterServiceClient(cc grpc.ClientConnInterface) MediaExporterServiceClient {
	return &mediaExporterServiceClient{cc}
}

func (c *mediaExporterServiceClient) ExportPDF(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, MediaExporterService_ExportPDF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaExporterServiceClient) ExportZIP(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, MediaExporterService_ExportZIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaExporterServiceServer is the server API for MediaExporterService service.
// All implementations must embed UnimplementedMediaExporterServiceServer
// for forward compatibility.
//
// MediaExporterService is responsible for generating exports (PDF, ZIP)
// from media files (screenshots, recordings, etc.) stored in the system.
type MediaExporterServiceServer interface {
	// Export PDF by channel and date range
	ExportPDF(context.Context, *ExportRequest) (*ExportResponse, error)
	// Export ZIP by channel and date range
	ExportZIP(context.Context, *ExportRequest) (*ExportResponse, error)
	mustEmbedUnimplementedMediaExporterServiceServer()
}

// UnimplementedMediaExporterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaExporterServiceServer struct{}

func (UnimplementedMediaExporterServiceServer) ExportPDF(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPDF not implemented")
}
func (UnimplementedMediaExporterServiceServer) ExportZIP(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportZIP not implemented")
}
func (UnimplementedMediaExporterServiceServer) mustEmbedUnimplementedMediaExporterServiceServer() {}
func (UnimplementedMediaExporterServiceServer) testEmbeddedByValue()                              {}

// UnsafeMediaExporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaExporterServiceServer will
// result in compilation errors.
type UnsafeMediaExporterServiceServer interface {
	mustEmbedUnimplementedMediaExporterServiceServer()
}

func RegisterMediaExporterServiceServer(s grpc.ServiceRegistrar, srv MediaExporterServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaExporterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaExporterService_ServiceDesc, srv)
}

func _MediaExporterService_ExportPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaExporterServiceServer).ExportPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaExporterService_ExportPDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaExporterServiceServer).ExportPDF(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaExporterService_ExportZIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaExporterServiceServer).ExportZIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaExporterService_ExportZIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaExporterServiceServer).ExportZIP(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaExporterService_ServiceDesc is the grpc.ServiceDesc for MediaExporterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaExporterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.mediaexporter.MediaExporterService",
	HandlerType: (*MediaExporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportPDF",
			Handler:    _MediaExporterService_ExportPDF_Handler,
		},
		{
			MethodName: "ExportZIP",
			Handler:    _MediaExporterService_ExportZIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media_exporter.proto",
}
