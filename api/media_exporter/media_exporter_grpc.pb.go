// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: media_exporter.proto

package media_exporter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaExporterService_GeneratePDF_FullMethodName = "/webitel.mediaexporter.MediaExporterService/GeneratePDF"
	MediaExporterService_DownloadPDF_FullMethodName = "/webitel.mediaexporter.MediaExporterService/DownloadPDF"
)

// MediaExporterServiceClient is the client API for MediaExporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for generating exports from media files
type MediaExporterServiceClient interface {
	// Generate PDF asynchronously, returns metadata
	GeneratePDF(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportMetadata, error)
	// Download previously generated PDF
	DownloadPDF(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportResponse], error)
}

type mediaExporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaExporterServiceClient(cc grpc.ClientConnInterface) MediaExporterServiceClient {
	return &mediaExporterServiceClient{cc}
}

func (c *mediaExporterServiceClient) GeneratePDF(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportMetadata)
	err := c.cc.Invoke(ctx, MediaExporterService_GeneratePDF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaExporterServiceClient) DownloadPDF(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaExporterService_ServiceDesc.Streams[0], MediaExporterService_DownloadPDF_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, ExportResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaExporterService_DownloadPDFClient = grpc.ServerStreamingClient[ExportResponse]

// MediaExporterServiceServer is the server API for MediaExporterService service.
// All implementations must embed UnimplementedMediaExporterServiceServer
// for forward compatibility.
//
// Service for generating exports from media files
type MediaExporterServiceServer interface {
	// Generate PDF asynchronously, returns metadata
	GeneratePDF(context.Context, *ExportRequest) (*ExportMetadata, error)
	// Download previously generated PDF
	DownloadPDF(*DownloadRequest, grpc.ServerStreamingServer[ExportResponse]) error
	mustEmbedUnimplementedMediaExporterServiceServer()
}

// UnimplementedMediaExporterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaExporterServiceServer struct{}

func (UnimplementedMediaExporterServiceServer) GeneratePDF(context.Context, *ExportRequest) (*ExportMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePDF not implemented")
}
func (UnimplementedMediaExporterServiceServer) DownloadPDF(*DownloadRequest, grpc.ServerStreamingServer[ExportResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadPDF not implemented")
}
func (UnimplementedMediaExporterServiceServer) mustEmbedUnimplementedMediaExporterServiceServer() {}
func (UnimplementedMediaExporterServiceServer) testEmbeddedByValue()                              {}

// UnsafeMediaExporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaExporterServiceServer will
// result in compilation errors.
type UnsafeMediaExporterServiceServer interface {
	mustEmbedUnimplementedMediaExporterServiceServer()
}

func RegisterMediaExporterServiceServer(s grpc.ServiceRegistrar, srv MediaExporterServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaExporterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaExporterService_ServiceDesc, srv)
}

func _MediaExporterService_GeneratePDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaExporterServiceServer).GeneratePDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaExporterService_GeneratePDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaExporterServiceServer).GeneratePDF(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaExporterService_DownloadPDF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaExporterServiceServer).DownloadPDF(m, &grpc.GenericServerStream[DownloadRequest, ExportResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaExporterService_DownloadPDFServer = grpc.ServerStreamingServer[ExportResponse]

// MediaExporterService_ServiceDesc is the grpc.ServiceDesc for MediaExporterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaExporterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.mediaexporter.MediaExporterService",
	HandlerType: (*MediaExporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePDF",
			Handler:    _MediaExporterService_GeneratePDF_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadPDF",
			Handler:       _MediaExporterService_DownloadPDF_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "media_exporter.proto",
}
